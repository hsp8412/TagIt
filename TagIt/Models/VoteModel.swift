//
//  VoteModel.swift
//  TagIt
//
//  Created by Peter Tran on 2024-10-20.
//

import FirebaseFirestore
import Foundation

/**
 Represents a vote (upvote or downvote) cast by a user on a specific item.

 This model captures the essential details of a user's vote, including the type of vote, the item being voted on, and the user who cast the vote.
 */
struct Vote: Codable {
    /**
     The unique identifier for the vote.

     This ID is typically generated by Firestore when the vote is created. It is optional as it may not be set until the vote is saved to the database.
     */
    var id: String?

    /**
     The unique identifier of the user who cast the vote.

     This property links the vote to a specific user in the system.
     */
    let userId: String

    /**
     The unique identifier of the item being voted on.

     This could reference a comment, deal, or review, depending on the `itemType`.
     */
    let itemId: String

    /**
     The type of vote cast by the user.

     Indicates whether the vote is an upvote or a downvote.
     */
    let voteType: VoteType

    /**
     The type of item being voted on.

     Determines whether the vote is associated with a comment, deal, or review.
     */
    let itemType: ItemType

    /**
     A flag indicating whether the vote is a dummy vote.

     This property can be used for testing or placeholder purposes.
     */
    var isDummy: Bool?

    /**
     Enumeration representing the possible types of votes.

     - `upvote`: Indicates an upvote.
     - `downvote`: Indicates a downvote.
     */
    enum VoteType: String, Codable {
        case upvote
        case downvote
    }

    /**
     Enumeration representing the different types of items that can be voted on.

     - `comment`: Represents a vote on a comment.
     - `deal`: Represents a vote on a deal.
     - `review`: Represents a vote on a review.
     */
    enum ItemType: Int, Codable {
        case comment = 0
        case deal = 1
        case review = 2
    }
}
